// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com) All Rights Reserved.
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "https://demo.docusign.net/clickapi") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.auth is http:ClientAuthConfig {
                httpClientConfig.auth = check config.auth.ensureType(http:ClientAuthConfig);
            }
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Gets the current version and other information about the Click API.
    #
    # + return - A successful response or an error. 
    resource isolated function get service_information() returns ServiceInformation|error {
        string resourcePath = string `/service_information`;
        ServiceInformation response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Gets all the clickwraps for an account.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + from_date - Optional. The earliest date to return agreements from.
    # + ownerUserId - Optional. The user ID of the owner.
    # + page_number - Optional. The page number to return.
    # + status - Optional. The status of the clickwraps to filter by. One of:
    # - `active`
    # - `inactive`
    # + to_date - Optional. The latest date to return agreements from.
    # + return - A successful response or an error. 
    resource isolated function get v1/accounts/[string accountId]/clickwraps(string? from_date = (), string? ownerUserId = (), string? page_number = (), string? shared = (), string? status = (), string? to_date = ()) returns ClickwrapVersionsResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps`;
        map<anydata> queryParam = {"from_date": from_date, "ownerUserId": ownerUserId, "page_number": page_number, "shared": shared, "status": status, "to_date": to_date};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ClickwrapVersionsResponse response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Creates a clickwrap for an account.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + return - A successful response or an error. 
    resource isolated function post v1/accounts/[string accountId]/clickwraps(ClickwrapRequest payload) returns ClickwrapVersionSummaryResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ClickwrapVersionSummaryResponse response = check self.clientEp->post(resourcePath, request);
        return response;
    }

    # Deletes clickwraps for an account.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapIds - A comma-separated list of clickwrap IDs to delete.
    # + return - A successful response or an error. 
    resource isolated function delete v1/accounts/[string accountId]/clickwraps(string? clickwrapIds = ()) returns ClickwrapsDeleteResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps`;
        map<anydata> queryParam = {"clickwrapIds": clickwrapIds};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ClickwrapsDeleteResponse response = check self.clientEp->delete(resourcePath);
        return response;
    }

    # Gets a  single clickwrap object.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + return - A successful response or an error. 
    resource isolated function get v1/accounts/[string accountId]/clickwraps/[string clickwrapId]() returns ClickwrapVersionSummaryResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}`;
        ClickwrapVersionSummaryResponse response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Updates the user ID of a clickwrap.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + return - A successful response or an error. 
    resource isolated function put v1/accounts/[string accountId]/clickwraps/[string clickwrapId](ClickwrapTransferRequest payload) returns ClickwrapVersionSummaryResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ClickwrapVersionSummaryResponse response = check self.clientEp->put(resourcePath, request);
        return response;
    }

    # Deletes a clickwrap and all of its versions.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + versions - A comma-separated list of versions to delete.
    # + return - A successful response or an error. 
    resource isolated function delete v1/accounts/[string accountId]/clickwraps/[string clickwrapId](string? versions = ()) returns ClickwrapVersionsDeleteResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}`;
        map<anydata> queryParam = {"versions": versions};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ClickwrapVersionsDeleteResponse response = check self.clientEp->delete(resourcePath);
        return response;
    }

    # Checks if a user has agreed to a clickwrap.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + return - A successful response or an error. 
    resource isolated function post v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/agreements(UserAgreementRequest payload) returns UserAgreementResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/agreements`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UserAgreementResponse response = check self.clientEp->post(resourcePath, request);
        return response;
    }

    # Gets a specific agreement for a specified clickwrap.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + agreementId - The agreement ID.
    # + clickwrapId - The ID of the clickwrap.
    # + return - A successful response or an error. 
    resource isolated function get v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/agreements/[string agreementId]() returns UserAgreementResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/agreements/${getEncodedUri(agreementId)}`;
        UserAgreementResponse response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Gets the completed user agreement PDF.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + agreementId - The agreement ID.
    # + clickwrapId - The ID of the clickwrap.
    # + return - A successful response or an error. 
    resource isolated function get v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/agreements/[string agreementId]/download() returns http:Response|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/agreements/${getEncodedUri(agreementId)}/download`;
        http:Response response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Get user agreements
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + client_user_id - The client ID.
    # + from_date - Optional. The earliest date to return agreements from.
    # + page_number - Optional. The page number to return.
    # + status - Optional. The status of the clickwraps to return.
    # + to_date - Optional. The latest date to return agreements from.
    # + return - A successful response or an error. 
    resource isolated function get v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/users(string? client_user_id = (), string? from_date = (), string? page_number = (), string? status = (), string? to_date = ()) returns ClickwrapAgreementsResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/users`;
        map<anydata> queryParam = {"client_user_id": client_user_id, "from_date": from_date, "page_number": page_number, "status": status, "to_date": to_date};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ClickwrapAgreementsResponse response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Creates a new clickwrap version.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + return - A successful response or an error. 
    resource isolated function post v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/versions(ClickwrapRequest payload) returns ClickwrapVersionSummaryResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/versions`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ClickwrapVersionSummaryResponse response = check self.clientEp->post(resourcePath, request);
        return response;
    }

    # Deletes the versions of a clickwrap.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + clickwrapVersionIds - A comma-separated list of clickwrap version IDs to delete.
    # + return - A successful response or an error. 
    resource isolated function delete v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/versions(string? clickwrapVersionIds = ()) returns ClickwrapVersionsDeleteResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/versions`;
        map<anydata> queryParam = {"clickwrapVersionIds": clickwrapVersionIds};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ClickwrapVersionsDeleteResponse response = check self.clientEp->delete(resourcePath);
        return response;
    }

    # Gets a specific version from a clickwrap.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + versionId - The ID of the version.
    # + return - A successful response or an error. 
    resource isolated function get v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/versions/[string versionId]() returns ClickwrapVersionResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/versions/${getEncodedUri(versionId)}`;
        ClickwrapVersionResponse response = check self.clientEp->get(resourcePath);
        return response;
    }

    # Updates a specific version of a clickwrap.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + versionId - The ID of the version.
    # + return - A successful response or an error. 
    resource isolated function put v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/versions/[string versionId](ClickwrapRequest payload) returns ClickwrapVersionSummaryResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/versions/${getEncodedUri(versionId)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ClickwrapVersionSummaryResponse response = check self.clientEp->put(resourcePath, request);
        return response;
    }

    # Deletes a specific version of a clickwrap.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + versionId - The ID of the version.
    # + return - A successful response or an error. 
    resource isolated function delete v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/versions/[string versionId]() returns ClickwrapVersionDeleteResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/versions/${getEncodedUri(versionId)}`;
        ClickwrapVersionDeleteResponse response = check self.clientEp->delete(resourcePath);
        return response;
    }

    # Gets the agreement responses for a clickwrap version.
    #
    # + accountId - A GUID that identifies your account.
    # This value is automatically generated by
    # DocuSign for any account you create. Copy the
    # value from the **API Account ID** field in
    # the **API and Keys** page in
    # eSignature Settings.
    # + clickwrapId - The ID of the clickwrap.
    # + versionId - The ID of the version.
    # + from_date - Optional. The earliest date to return agreements from.
    # + page_number - Optional. The page number to return.
    # + status - Clickwrap status. Possible values:
    # - `active`
    # - `inactive`
    # - `deleted`
    # + to_date - Optional. The latest date to return agreements from.
    # + return - A successful response or an error. 
    resource isolated function get v1/accounts/[string accountId]/clickwraps/[string clickwrapId]/versions/[string versionId]/users(string? client_user_id = (), string? from_date = (), string? page_number = (), string? status = (), string? to_date = ()) returns ClickwrapAgreementsResponse|error {
        string resourcePath = string `/v1/accounts/${getEncodedUri(accountId)}/clickwraps/${getEncodedUri(clickwrapId)}/versions/${getEncodedUri(versionId)}/users`;
        map<anydata> queryParam = {"client_user_id": client_user_id, "from_date": from_date, "page_number": page_number, "status": status, "to_date": to_date};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ClickwrapAgreementsResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
}
